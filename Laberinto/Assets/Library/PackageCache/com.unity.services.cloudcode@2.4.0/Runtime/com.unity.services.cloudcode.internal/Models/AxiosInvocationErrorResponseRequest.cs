//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.CloudCode.Internal.Http;



namespace Unity.Services.CloudCode.Internal.Models
{
    /// <summary>
    /// AxiosInvocationErrorResponseRequest model
    /// </summary>
    [Preserve]
    [DataContract(Name = "AxiosInvocationErrorResponseRequest")]
    internal class AxiosInvocationErrorResponseRequest
    {
        /// <summary>
        /// Creates an instance of AxiosInvocationErrorResponseRequest.
        /// </summary>
        /// <param name="data">data param</param>
        /// <param name="headers">headers param</param>
        /// <param name="method">method param</param>
        /// <param name="url">url param</param>
        [Preserve]
        public AxiosInvocationErrorResponseRequest(object data = default, object headers = default, string method = default, string url = default)
        {
            Data = (IDeserializable) JsonObject.GetNewJsonObjectResponse(data);
            Headers = (IDeserializable) JsonObject.GetNewJsonObjectResponse(headers);
            Method = method;
            Url = url;
        }

        /// <summary>
        /// Parameter data of AxiosInvocationErrorResponseRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public IDeserializable Data{ get; }
        
        /// <summary>
        /// Parameter headers of AxiosInvocationErrorResponseRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public IDeserializable Headers{ get; }
        
        /// <summary>
        /// Parameter method of AxiosInvocationErrorResponseRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public string Method{ get; }
        
        /// <summary>
        /// Parameter url of AxiosInvocationErrorResponseRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url{ get; }
    
        /// <summary>
        /// Formats a AxiosInvocationErrorResponseRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Data != null)
            {
                serializedModel += "data," + Data.ToString() + ",";
            }
            if (Headers != null)
            {
                serializedModel += "headers," + Headers.ToString() + ",";
            }
            if (Method != null)
            {
                serializedModel += "method," + Method + ",";
            }
            if (Url != null)
            {
                serializedModel += "url," + Url;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a AxiosInvocationErrorResponseRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Method != null)
            {
                var methodStringValue = Method.ToString();
                dictionary.Add("method", methodStringValue);
            }
            
            if (Url != null)
            {
                var urlStringValue = Url.ToString();
                dictionary.Add("url", urlStringValue);
            }
            
            return dictionary;
        }
    }
}
