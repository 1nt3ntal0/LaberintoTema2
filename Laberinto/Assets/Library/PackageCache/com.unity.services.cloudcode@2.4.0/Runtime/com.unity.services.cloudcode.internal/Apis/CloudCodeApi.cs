//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.CloudCode.Internal.Models;
using Unity.Services.CloudCode.Internal.Http;
using Unity.Services.Authentication.Internal;
using Unity.Services.CloudCode.Internal.CloudCode;

namespace Unity.Services.CloudCode.Internal.Apis.CloudCode
{
    /// <summary>
    /// Interface for the CloudCodeApiClient
    /// </summary>
    internal interface ICloudCodeApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Run module function.
            /// </summary>
            /// <param name="request">Request object for RunModule.</param>
            /// <param name="operationConfiguration">Configuration for RunModule.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.RunModuleResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.RunModuleResponse>> RunModuleAsync(Unity.Services.CloudCode.Internal.CloudCode.RunModuleRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Run script.
            /// </summary>
            /// <param name="request">Request object for RunScript.</param>
            /// <param name="operationConfiguration">Configuration for RunScript.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.RunScriptResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.RunScriptResponse>> RunScriptAsync(Unity.Services.CloudCode.Internal.CloudCode.RunScriptRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create a player subscription token..
            /// </summary>
            /// <param name="request">Request object for SubscriptionTokenPlayer.</param>
            /// <param name="operationConfiguration">Configuration for SubscriptionTokenPlayer.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionTokenResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.SubscriptionTokenResponse>> SubscriptionTokenPlayerAsync(Unity.Services.CloudCode.Internal.CloudCode.SubscriptionTokenPlayerRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create a project subscription token..
            /// </summary>
            /// <param name="request">Request object for SubscriptionTokenProject.</param>
            /// <param name="operationConfiguration">Configuration for SubscriptionTokenProject.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionTokenResponse object.</returns>
            /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.SubscriptionTokenResponse>> SubscriptionTokenProjectAsync(Unity.Services.CloudCode.Internal.CloudCode.SubscriptionTokenProjectRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="ICloudCodeApiClient"/>
    internal class CloudCodeApiClient : BaseApiClient, ICloudCodeApiClient
    {
        private IAccessToken _accessToken;
        private const int _baseTimeout = 25;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://cloud-code.services.api.unity.com", 10, 4, null);
                if (CloudCodeService.Instance != null)
                {
                    globalConfiguration = CloudCodeService.Instance.Configuration;
                }
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// CloudCodeApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for CloudCodeApiClient.</param>
        /// <param name="accessToken">The Authentication token for the client.</param>
        /// <param name="configuration"> CloudCodeApiClient Configuration object.</param>
        public CloudCodeApiClient(IHttpClient httpClient,
            IAccessToken accessToken,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            _accessToken = accessToken;
        }


        /// <summary>
        /// Async Operation.
        /// Run module function.
        /// </summary>
        /// <param name="request">Request object for RunModule.</param>
        /// <param name="operationConfiguration">Configuration for RunModule.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.RunModuleResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.RunModuleResponse>> RunModuleAsync(Unity.Services.CloudCode.Internal.CloudCode.RunModuleRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.RunModuleResponse)   },{"400", typeof(Models.BasicErrorResponse)   },{"401", typeof(Models.BasicErrorResponse)   },{"404", typeof(Models.BasicErrorResponse)   },{"422", typeof(RunModule422Response)   },{"429", typeof(Models.BasicErrorResponse)   },{"500", typeof(Models.BasicErrorResponse)   },{"503", typeof(Models.BasicErrorResponse)   },{"504", typeof(Models.BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.RunModuleResponse>(response, statusCodeToTypeMap);
            return new Response<Models.RunModuleResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Run script.
        /// </summary>
        /// <param name="request">Request object for RunScript.</param>
        /// <param name="operationConfiguration">Configuration for RunScript.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.RunScriptResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.RunScriptResponse>> RunScriptAsync(Unity.Services.CloudCode.Internal.CloudCode.RunScriptRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.RunScriptResponse)   },{"400", typeof(RunScript400Response)   },{"401", typeof(Models.BasicErrorResponse)   },{"404", typeof(Models.BasicErrorResponse)   },{"422", typeof(RunModule422Response)   },{"429", typeof(Models.BasicErrorResponse)   },{"500", typeof(Models.BasicErrorResponse)   },{"503", typeof(Models.BasicErrorResponse)   },{"504", typeof(Models.BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.RunScriptResponse>(response, statusCodeToTypeMap);
            return new Response<Models.RunScriptResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create a player subscription token..
        /// </summary>
        /// <param name="request">Request object for SubscriptionTokenPlayer.</param>
        /// <param name="operationConfiguration">Configuration for SubscriptionTokenPlayer.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionTokenResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.SubscriptionTokenResponse>> SubscriptionTokenPlayerAsync(Unity.Services.CloudCode.Internal.CloudCode.SubscriptionTokenPlayerRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.SubscriptionTokenResponse)   },{"401", typeof(Models.BasicErrorResponse)   },{"429", typeof(Models.BasicErrorResponse)   },{"500", typeof(Models.BasicErrorResponse)   },{"503", typeof(Models.BasicErrorResponse)   },{"504", typeof(Models.BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.SubscriptionTokenResponse>(response, statusCodeToTypeMap);
            return new Response<Models.SubscriptionTokenResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create a project subscription token..
        /// </summary>
        /// <param name="request">Request object for SubscriptionTokenProject.</param>
        /// <param name="operationConfiguration">Configuration for SubscriptionTokenProject.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.SubscriptionTokenResponse object.</returns>
        /// <exception cref="Unity.Services.CloudCode.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.SubscriptionTokenResponse>> SubscriptionTokenProjectAsync(Unity.Services.CloudCode.Internal.CloudCode.SubscriptionTokenProjectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.SubscriptionTokenResponse)   },{"401", typeof(Models.BasicErrorResponse)   },{"429", typeof(Models.BasicErrorResponse)   },{"500", typeof(Models.BasicErrorResponse)   },{"503", typeof(Models.BasicErrorResponse)   },{"504", typeof(Models.BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.SubscriptionTokenResponse>(response, statusCodeToTypeMap);
            return new Response<Models.SubscriptionTokenResponse>(response, handledResponse);
        }

    }
}
