//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.CloudCode.Authoring.Client.Http;



namespace Unity.Services.CloudCode.Authoring.Client.Models
{
    /// <summary>
    /// CloudCodeGetScriptResponseVersions model
    /// </summary>
    [Preserve]
    [DataContract(Name = "cloud_code_get_script_response_versions")]
    internal class CloudCodeGetScriptResponseVersions
    {
        /// <summary>
        /// Creates an instance of CloudCodeGetScriptResponseVersions.
        /// </summary>
        /// <param name="code">The code of the version of the Script</param>
        /// <param name="version">The version id of the version of the Script</param>
        /// <param name="isDraft">A flag indicating if the Script is a draft Script</param>
        /// <param name="dateUpdated">Date time in ISO 8601 format. Null if there is no associated value.</param>
        [Preserve]
        public CloudCodeGetScriptResponseVersions(string code, int? version, bool isDraft, DateTime? dateUpdated)
        {
            Code = code;
            Version = version;
            IsDraft = isDraft;
            DateUpdated = dateUpdated;
        }

        /// <summary>
        /// The code of the version of the Script
        /// </summary>
        [Preserve]
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code{ get; }
        
        /// <summary>
        /// The version id of the version of the Script
        /// </summary>
        [Preserve]
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int? Version{ get; }
        
        /// <summary>
        /// A flag indicating if the Script is a draft Script
        /// </summary>
        [Preserve]
        [DataMember(Name = "isDraft", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDraft{ get; }
        
        /// <summary>
        /// Date time in ISO 8601 format. Null if there is no associated value.
        /// </summary>
        [Preserve]
        [DataMember(Name = "dateUpdated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? DateUpdated{ get; }
    
        /// <summary>
        /// Formats a CloudCodeGetScriptResponseVersions into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Code != null)
            {
                serializedModel += "code," + Code + ",";
            }
            if (Version != null)
            {
                serializedModel += "version," + Version.ToString() + ",";
            }
            serializedModel += "isDraft," + IsDraft.ToString() + ",";
            if (DateUpdated != null)
            {
                serializedModel += "dateUpdated," + DateUpdated.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a CloudCodeGetScriptResponseVersions as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Code != null)
            {
                var codeStringValue = Code.ToString();
                dictionary.Add("code", codeStringValue);
            }
            
            if (Version != null)
            {
                var versionStringValue = Version.ToString();
                dictionary.Add("version", versionStringValue);
            }
            
            var isDraftStringValue = IsDraft.ToString();
            dictionary.Add("isDraft", isDraftStringValue);
            
            if (DateUpdated != null)
            {
                var dateUpdatedStringValue = DateUpdated.ToString();
                dictionary.Add("dateUpdated", dateUpdatedStringValue);
            }
            
            return dictionary;
        }
    }
}
