//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.CloudCode.Authoring.Client.Http;



namespace Unity.Services.CloudCode.Authoring.Client.Models
{
    /// <summary>
    /// CloudCodeGetScriptResponse model
    /// </summary>
    [Preserve]
    [DataContract(Name = "cloud-code.get-script-response")]
    internal class CloudCodeGetScriptResponse
    {
        /// <summary>
        /// Creates an instance of CloudCodeGetScriptResponse.
        /// </summary>
        /// <param name="name">The name of the Script</param>
        /// <param name="type">The type of the Script</param>
        /// <param name="language">The language of the Script</param>
        /// <param name="activeScript">activeScript param</param>
        /// <param name="versions">A list of versions of the Script</param>
        /// <param name="@params">The current list of parameters that are used by the Script</param>
        [Preserve]
        public CloudCodeGetScriptResponse(string name, TypeOptions type, LanguageOptions language, CloudCodeGetScriptResponseActiveScript activeScript, List<CloudCodeGetScriptResponseVersions> versions, List<CloudCodeScriptParams> @params = default)
        {
            Name = name;
            Type = type;
            Language = language;
            ActiveScript = activeScript;
            Versions = versions;
            Params = @params;
        }

        /// <summary>
        /// The name of the Script
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }
        
        /// <summary>
        /// The type of the Script
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeOptions Type{ get; }
        
        /// <summary>
        /// The language of the Script
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public LanguageOptions Language{ get; }
        
        /// <summary>
        /// Parameter activeScript of CloudCodeGetScriptResponse
        /// </summary>
        [Preserve]
        [DataMember(Name = "activeScript", IsRequired = true, EmitDefaultValue = true)]
        public CloudCodeGetScriptResponseActiveScript ActiveScript{ get; }
        
        /// <summary>
        /// A list of versions of the Script
        /// </summary>
        [Preserve]
        [DataMember(Name = "versions", IsRequired = true, EmitDefaultValue = true)]
        public List<CloudCodeGetScriptResponseVersions> Versions{ get; }
        
        /// <summary>
        /// The current list of parameters that are used by the Script
        /// </summary>
        [Preserve]
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public List<CloudCodeScriptParams> Params{ get; }
    
        /// <summary>
        /// The type of the Script
        /// </summary>
        /// <value>The type of the Script</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeOptions
        {
            /// <summary>
            /// Enum API for value: API
            /// </summary>
            [EnumMember(Value = "API")]
            API = 1,
            /// <summary>
            /// Enum MODULE for value: MODULE
            /// </summary>
            [EnumMember(Value = "MODULE")]
            MODULE = 2
        }

        /// <summary>
        /// The language of the Script
        /// </summary>
        /// <value>The language of the Script</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageOptions
        {
            /// <summary>
            /// Enum JS for value: JS
            /// </summary>
            [EnumMember(Value = "JS")]
            JS = 1
        }

        /// <summary>
        /// Formats a CloudCodeGetScriptResponse into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "type," + Type + ",";
            serializedModel += "language," + Language + ",";
            if (ActiveScript != null)
            {
                serializedModel += "activeScript," + ActiveScript.ToString() + ",";
            }
            if (Versions != null)
            {
                serializedModel += "versions," + Versions.ToString() + ",";
            }
            if (Params != null)
            {
                serializedModel += "params," + Params.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a CloudCodeGetScriptResponse as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            var typeStringValue = Type.ToString();
            dictionary.Add("type", typeStringValue);
            
            var languageStringValue = Language.ToString();
            dictionary.Add("language", languageStringValue);
            
            return dictionary;
        }
    }
}
