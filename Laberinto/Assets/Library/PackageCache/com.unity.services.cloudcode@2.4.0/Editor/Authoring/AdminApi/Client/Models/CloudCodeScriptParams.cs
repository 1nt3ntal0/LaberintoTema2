//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.CloudCode.Authoring.Client.Http;



namespace Unity.Services.CloudCode.Authoring.Client.Models
{
    /// <summary>
    /// CloudCodeScriptParams model
    /// </summary>
    [Preserve]
    [DataContract(Name = "cloud-code.script-params")]
    internal class CloudCodeScriptParams
    {
        /// <summary>
        /// Creates an instance of CloudCodeScriptParams.
        /// </summary>
        /// <param name="name">The name of the parameter</param>
        /// <param name="type">The type of the parameter</param>
        /// <param name="required">A flag indicating if the parameter is required when running a Script</param>
        [Preserve]
        public CloudCodeScriptParams(string name, TypeOptions type = TypeOptions.ANY, bool required = default)
        {
            Name = name;
            Type = type;
            Required = required;
        }

        /// <summary>
        /// The name of the parameter
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }
        
        /// <summary>
        /// The type of the parameter
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeOptions Type{ get; }
        
        /// <summary>
        /// A flag indicating if the parameter is required when running a Script
        /// </summary>
        [Preserve]
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required{ get; }
    
        /// <summary>
        /// The type of the parameter
        /// </summary>
        /// <value>The type of the parameter</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeOptions
        {
            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 1,
            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 2,
            /// <summary>
            /// Enum NUMERIC for value: NUMERIC
            /// </summary>
            [EnumMember(Value = "NUMERIC")]
            NUMERIC = 3,
            /// <summary>
            /// Enum JSON for value: JSON
            /// </summary>
            [EnumMember(Value = "JSON")]
            JSON = 4,
            /// <summary>
            /// Enum ANY for value: ANY
            /// </summary>
            [EnumMember(Value = "ANY")]
            ANY = 5
        }

        /// <summary>
        /// Formats a CloudCodeScriptParams into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "type," + Type + ",";
            serializedModel += "required," + Required.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a CloudCodeScriptParams as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            var typeStringValue = Type.ToString();
            dictionary.Add("type", typeStringValue);
            
            var requiredStringValue = Required.ToString();
            dictionary.Add("required", requiredStringValue);
            
            return dictionary;
        }
    }
}
